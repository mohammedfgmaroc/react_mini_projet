{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\moham\\\\Desktop\\\\react-snake-starter-files-master\\\\react-snake\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from \"react\";\nimport { useInterval } from \"./useInterval\";\nimport { CANVAS_SIZE, SNAKE_START, APPLE_START, SCALE, SPEED, DIRECTIONS } from './constants';\nconst App = () => {\n  _s();\n  const canvasRef = useRef(null);\n  const [snake, setSnake] = useState(SNAKE_START);\n  const [apple, setApple] = useState(APPLE_START);\n  const [dir, setDir] = useState([0, -1]);\n  const [speed, setSpeed] = useState(null);\n  const [gameOver, setGameOver] = useState(false);\n  const startGame = () => {\n    setSnake(SNAKE_START);\n    setApple(APPLE_START);\n    setDir([0, -1]);\n    setSpeed(SPEED);\n    setGameOver(false);\n  };\n  const endGame = () => {\n    setSpeed(null);\n    setGameOver(true);\n  };\n  const moveSnake = _ref => {\n    let {\n      keyCode\n    } = _ref;\n    return keyCode >= 37 && keyCode <= 40 && setDir(DIRECTIONS[keyCode]);\n  };\n  const createApple = () => apple.map((_, i) => Math.floor(Math.random() * CANVAS_SIZE[i] / SCALE));\n  const checkCollision = function (piece) {\n    let snk = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : snake;\n    if (piece[0] * SCALE >= CANVAS_SIZE[0] || piece[0] < 0 || piece[1] * SCALE >= CANVAS_SIZE[1] || piece[1] < 0) return true;\n    for (const segment of snk) {\n      if (piece[0] === segment[0] && piece[1] === segment[1]) return true;\n    }\n    return false;\n  };\n  const checkAppleCollision = newSnake => {\n    if (newSnake[0][0] === apple[0] && newSnake[0][1] === apple[1]) {\n      let newApple = createApple();\n      while (checkCollision(newApple, newSnake)) {\n        newApple = createApple();\n      }\n      setApple(newApple);\n      return true;\n    }\n    return false;\n  };\n  const gameLoop = () => {\n    const snakeCopy = JSON.parse(JSON.stringify(snake));\n    const newSnakeHead = [snakeCopy[0][0] + dir[0], snakeCopy[0][1] + dir[1]];\n    snakeCopy.unshift(newSnakeHead);\n    if (checkCollision(newSnakeHead)) endGame();\n    if (!checkAppleCollision(snakeCopy)) {\n      snakeCopy.pop();\n    }\n    setSnake(snakeCopy);\n  };\n  useEffect(() => {\n    const context = canvasRef.current.getContext(\"2d\");\n    context.setTransform(SCALE, 0, 0, SCALE, 0, 0);\n    context.clearRect(0, 0, CANVAS_SIZE[0], CANVAS_SIZE[1]);\n    context.fillStyle = \"black\";\n    snake.forEach(_ref2 => {\n      let [x, y] = _ref2;\n      return context.fillRect(x, y, 1, 1);\n    });\n    context.fillStyle = \"red\";\n    context.fillRect(apple[0], apple[1], 1, 1);\n  }, [snake, apple, gameOver]);\n  useInterval(() => gameLoop(), speed);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    role: \"button\",\n    tabIndex: \"0\",\n    onKeyDown: e => moveSnake(e),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"canvas\", {\n    style: {\n      border: \"4px solid black\"\n    },\n    ref: canvasRef,\n    width: `${CANVAS_SIZE[0]}px`,\n    height: `${CANVAS_SIZE[1]}px`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 9\n    }\n  }), gameOver && /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 22\n    }\n  }, \"GAME OVER!\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: startGame,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 9\n    }\n  }, \"Start Game\"));\n};\n_s(App, \"i/XcNvXKCmE9SbiVgAT6H/EgUzU=\", false, function () {\n  return [useInterval];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useRef","useEffect","useInterval","CANVAS_SIZE","SNAKE_START","APPLE_START","SCALE","SPEED","DIRECTIONS","App","canvasRef","snake","setSnake","apple","setApple","dir","setDir","speed","setSpeed","gameOver","setGameOver","startGame","endGame","moveSnake","keyCode","createApple","map","_","i","Math","floor","random","checkCollision","piece","snk","segment","checkAppleCollision","newSnake","newApple","gameLoop","snakeCopy","JSON","parse","stringify","newSnakeHead","unshift","pop","context","current","getContext","setTransform","clearRect","fillStyle","forEach","x","y","fillRect","e","border"],"sources":["C:/Users/moham/Desktop/react-snake-starter-files-master/react-snake/src/App.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\nimport { useInterval } from \"./useInterval\";\nimport {\n    CANVAS_SIZE,\n    SNAKE_START,\n    APPLE_START, \n    SCALE,\n    SPEED,\n    DIRECTIONS\n} from './constants';\n\nconst App = () => {\n    const canvasRef = useRef(null);\n    const [snake, setSnake] = useState(SNAKE_START);\n    const [apple, setApple] = useState(APPLE_START);\n    const [dir, setDir] = useState([0, -1]);\n    const [speed, setSpeed] = useState(null);\n    const [gameOver, setGameOver] = useState(false);\nconst startGame = () => {\n    setSnake(SNAKE_START);\n    setApple(APPLE_START);\n    setDir([0,-1]);\n    setSpeed(SPEED);\n    setGameOver(false);\n    }\nconst endGame = () => {\n    setSpeed(null);\n    setGameOver(true);\n}   \nconst moveSnake = ({keyCode}) => keyCode >= 37 && keyCode <=40 && setDir(DIRECTIONS[keyCode]);\n    \nconst createApple = () => apple.map((_,i) => Math.floor(Math.random() * (CANVAS_SIZE[i]) / SCALE));\n\nconst checkCollision = (piece, snk = snake) => {\n    if(\n        piece[0] * SCALE >= CANVAS_SIZE[0] ||\n        piece[0] < 0 ||\n        piece[1] * SCALE >= CANVAS_SIZE[1] ||\n        piece[1] < 0\n    )\n    return true;\n    for(const segment of snk){\n        if(\n            piece[0] === segment[0] && piece[1] === segment[1]\n        )\n        return true;\n    }\nreturn false;\n}\nconst checkAppleCollision = newSnake => {\n    if(newSnake[0][0] === apple[0] && newSnake[0][1] === apple[1]){\n        let newApple = createApple();\n        while(checkCollision(newApple,newSnake)){\n            newApple = createApple();\n        }\n        setApple(newApple);\n        return true;\n    }\n    return false;\n}\nconst gameLoop = () => {\n    const snakeCopy = JSON.parse(JSON.stringify(snake));\n    const newSnakeHead = [snakeCopy[0][0] + dir[0], snakeCopy[0][1] + dir[1]];\n    snakeCopy.unshift(newSnakeHead);\n    if(checkCollision(newSnakeHead)) endGame();\n    if(!checkAppleCollision(snakeCopy)){\n        snakeCopy.pop();\n    }\n    setSnake(snakeCopy);\n}\nuseEffect(() => {\n    const context = canvasRef.current.getContext(\"2d\");\n    context.setTransform(SCALE, 0, 0, SCALE, 0, 0);\n    context.clearRect(0, 0, CANVAS_SIZE[0], CANVAS_SIZE[1]);\n    context.fillStyle = \"black\";\n    snake.forEach(([x, y]) => context.fillRect(x, y, 1, 1));\n    context.fillStyle = \"red\";\n    context.fillRect(apple[0], apple[1], 1, 1);\n\n}, [snake, apple, gameOver])\nuseInterval(() => gameLoop(), speed);\n\nreturn(\n    <div role=\"button\" tabIndex=\"0\" onKeyDown={e => moveSnake(e)}>\n        <canvas\n            style={{border: \"4px solid black\" }}\n            ref={canvasRef}\n            width={`${CANVAS_SIZE[0]}px`}\n            height={`${CANVAS_SIZE[1]}px`}\n            />\n        {gameOver && <div>GAME OVER!</div>}\n        <button onClick={startGame}>Start Game</button>\n    </div>\n )\n};\n  \nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}